//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taxi.Services.ServiceEnVangVip {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceEnVangVip.IOperationService")]
    public interface IOperationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendACKGetPhone", ReplyAction="http://tempuri.org/IOperationService/SendACKGetPhoneResponse")]
        bool SendACKGetPhone(string tripId, byte result, string vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendACKInvite", ReplyAction="http://tempuri.org/IOperationService/SendACKInviteResponse")]
        bool SendACKInvite(string tripId, string vehicle, byte result, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendOperatorCancel", ReplyAction="http://tempuri.org/IOperationService/SendOperatorCancelResponse")]
        bool SendOperatorCancel(string tripId, string msg, bool isRemoveLandmark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendInitTrip", ReplyAction="http://tempuri.org/IOperationService/SendInitTripResponse")]
        bool SendInitTrip(
                    string tripId, 
                    string fromName, 
                    string fromAddress, 
                    float fromLat, 
                    float fromLng, 
                    string toName, 
                    string toAddress, 
                    float toLat, 
                    float toLng, 
                    string note, 
                    byte quantity, 
                    byte tripType, 
                    byte customerType, 
                    string phone, 
                    string[] vehicleOptions, 
                    bool isRoute, 
                    string routeName, 
                    float routeMoney);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendLogoutDriver", ReplyAction="http://tempuri.org/IOperationService/SendLogoutDriverResponse")]
        bool SendLogoutDriver(string vehicle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendOperatorCatched", ReplyAction="http://tempuri.org/IOperationService/SendOperatorCatchedResponse")]
        bool SendOperatorCatched(string tripId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendSms", ReplyAction="http://tempuri.org/IOperationService/SendSmsResponse")]
        int SendSms(string phone, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendCustomerUnSeenCar", ReplyAction="http://tempuri.org/IOperationService/SendCustomerUnSeenCarResponse")]
        bool SendCustomerUnSeenCar(string tripId, int cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendText", ReplyAction="http://tempuri.org/IOperationService/SendTextResponse")]
        bool SendText(string vehiclePlate, string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendConfirmDone", ReplyAction="http://tempuri.org/IOperationService/SendConfirmDoneResponse")]
        bool SendConfirmDone(string tripId, byte result, string msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendOperatorCmd", ReplyAction="http://tempuri.org/IOperationService/SendOperatorCmdResponse")]
        bool SendOperatorCmd(int cmd, string vehiclePlate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendConfirmLandmark", ReplyAction="http://tempuri.org/IOperationService/SendConfirmLandmarkResponse")]
        bool SendConfirmLandmark(string vehiclePlate, int landmarkId, bool ok, int node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendACKRenewLandmark", ReplyAction="http://tempuri.org/IOperationService/SendACKRenewLandmarkResponse")]
        bool SendACKRenewLandmark(string vehiclePlate, int landmarkId, int node);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendACKActiveChange", ReplyAction="http://tempuri.org/IOperationService/SendACKActiveChangeResponse")]
        bool SendACKActiveChange(string vehiclePlate, byte status, string driverCode, string soHieuXe, short messageCode, int cmdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendLandmark", ReplyAction="http://tempuri.org/IOperationService/SendLandmarkResponse")]
        bool SendLandmark(string vehiclePlate, int landmarkId, int node, int cmdId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperationService/SendACKDriverNewTrip", ReplyAction="http://tempuri.org/IOperationService/SendACKDriverNewTripResponse")]
        bool SendACKDriverNewTrip(string vehiclePlate, string tripId, string tripKey);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOperationServiceChannel : Taxi.Services.ServiceEnVangVip.IOperationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OperationServiceClient : System.ServiceModel.ClientBase<Taxi.Services.ServiceEnVangVip.IOperationService>, Taxi.Services.ServiceEnVangVip.IOperationService {
        
        public OperationServiceClient() {
        }
        
        public OperationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OperationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OperationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendACKGetPhone(string tripId, byte result, string vehicle) {
            return base.Channel.SendACKGetPhone(tripId, result, vehicle);
        }
        
        public bool SendACKInvite(string tripId, string vehicle, byte result, string msg) {
            return base.Channel.SendACKInvite(tripId, vehicle, result, msg);
        }
        
        public bool SendOperatorCancel(string tripId, string msg, bool isRemoveLandmark) {
            return base.Channel.SendOperatorCancel(tripId, msg, isRemoveLandmark);
        }
        
        public bool SendInitTrip(
                    string tripId, 
                    string fromName, 
                    string fromAddress, 
                    float fromLat, 
                    float fromLng, 
                    string toName, 
                    string toAddress, 
                    float toLat, 
                    float toLng, 
                    string note, 
                    byte quantity, 
                    byte tripType, 
                    byte customerType, 
                    string phone, 
                    string[] vehicleOptions, 
                    bool isRoute, 
                    string routeName, 
                    float routeMoney) {
            return base.Channel.SendInitTrip(tripId, fromName, fromAddress, fromLat, fromLng, toName, toAddress, toLat, toLng, note, quantity, tripType, customerType, phone, vehicleOptions, isRoute, routeName, routeMoney);
        }
        
        public bool SendLogoutDriver(string vehicle) {
            return base.Channel.SendLogoutDriver(vehicle);
        }
        
        public bool SendOperatorCatched(string tripId) {
            return base.Channel.SendOperatorCatched(tripId);
        }
        
        public int SendSms(string phone, string msg) {
            return base.Channel.SendSms(phone, msg);
        }
        
        public bool SendCustomerUnSeenCar(string tripId, int cmd) {
            return base.Channel.SendCustomerUnSeenCar(tripId, cmd);
        }
        
        public bool SendText(string vehiclePlate, string text) {
            return base.Channel.SendText(vehiclePlate, text);
        }
        
        public bool SendConfirmDone(string tripId, byte result, string msg) {
            return base.Channel.SendConfirmDone(tripId, result, msg);
        }
        
        public bool SendOperatorCmd(int cmd, string vehiclePlate) {
            return base.Channel.SendOperatorCmd(cmd, vehiclePlate);
        }
        
        public bool SendConfirmLandmark(string vehiclePlate, int landmarkId, bool ok, int node) {
            return base.Channel.SendConfirmLandmark(vehiclePlate, landmarkId, ok, node);
        }
        
        public bool SendACKRenewLandmark(string vehiclePlate, int landmarkId, int node) {
            return base.Channel.SendACKRenewLandmark(vehiclePlate, landmarkId, node);
        }
        
        public bool SendACKActiveChange(string vehiclePlate, byte status, string driverCode, string soHieuXe, short messageCode, int cmdId) {
            return base.Channel.SendACKActiveChange(vehiclePlate, status, driverCode, soHieuXe, messageCode, cmdId);
        }
        
        public bool SendLandmark(string vehiclePlate, int landmarkId, int node, int cmdId) {
            return base.Channel.SendLandmark(vehiclePlate, landmarkId, node, cmdId);
        }
        
        public bool SendACKDriverNewTrip(string vehiclePlate, string tripId, string tripKey) {
            return base.Channel.SendACKDriverNewTrip(vehiclePlate, tripId, tripKey);
        }
    }
}
