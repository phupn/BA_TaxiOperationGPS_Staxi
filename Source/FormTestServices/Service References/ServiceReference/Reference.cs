//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormTestServices.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseKey", Namespace="http://schemas.datacontract.org/2004/07/StaxiMan_Services")]
    [System.SerializableAttribute()]
    public partial class LicenseKey : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string APIKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string APIKey {
            get {
                return this.APIKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.APIKeyField, value) != true)) {
                    this.APIKeyField = value;
                    this.RaisePropertyChanged("APIKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        string GetData(string userName, string password, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(string userName, string password, int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestLicense", ReplyAction="http://tempuri.org/IService/RequestLicenseResponse")]
        int RequestLicense(string MacAddress, string CPUId, string PhoneNumber, string CompName, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/RequestLicense", ReplyAction="http://tempuri.org/IService/RequestLicenseResponse")]
        System.Threading.Tasks.Task<int> RequestLicenseAsync(string MacAddress, string CPUId, string PhoneNumber, string CompName, string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncLicense", ReplyAction="http://tempuri.org/IService/SyncLicenseResponse")]
        FormTestServices.ServiceReference.LicenseKey SyncLicense(string MacAddress, string CPUId, string PhoneNumber, string CompName, string licenseCode, string licenseKey, string apiCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SyncLicense", ReplyAction="http://tempuri.org/IService/SyncLicenseResponse")]
        System.Threading.Tasks.Task<FormTestServices.ServiceReference.LicenseKey> SyncLicenseAsync(string MacAddress, string CPUId, string PhoneNumber, string CompName, string licenseCode, string licenseKey, string apiCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : FormTestServices.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<FormTestServices.ServiceReference.IService>, FormTestServices.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(string userName, string password, int value) {
            return base.Channel.GetData(userName, password, value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(string userName, string password, int value) {
            return base.Channel.GetDataAsync(userName, password, value);
        }
        
        public int RequestLicense(string MacAddress, string CPUId, string PhoneNumber, string CompName, string UserName, string Password) {
            return base.Channel.RequestLicense(MacAddress, CPUId, PhoneNumber, CompName, UserName, Password);
        }
        
        public System.Threading.Tasks.Task<int> RequestLicenseAsync(string MacAddress, string CPUId, string PhoneNumber, string CompName, string UserName, string Password) {
            return base.Channel.RequestLicenseAsync(MacAddress, CPUId, PhoneNumber, CompName, UserName, Password);
        }
        
        public FormTestServices.ServiceReference.LicenseKey SyncLicense(string MacAddress, string CPUId, string PhoneNumber, string CompName, string licenseCode, string licenseKey, string apiCode) {
            return base.Channel.SyncLicense(MacAddress, CPUId, PhoneNumber, CompName, licenseCode, licenseKey, apiCode);
        }
        
        public System.Threading.Tasks.Task<FormTestServices.ServiceReference.LicenseKey> SyncLicenseAsync(string MacAddress, string CPUId, string PhoneNumber, string CompName, string licenseCode, string licenseKey, string apiCode) {
            return base.Channel.SyncLicenseAsync(MacAddress, CPUId, PhoneNumber, CompName, licenseCode, licenseKey, apiCode);
        }
    }
}
